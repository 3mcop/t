<?php

/**
 * @file
 * Localitee-specific stuff that has not yet gained a module of its own.
 */


/**
 * Implements hook_preprocess_page()
 */
function lt_misc_preprocess_page( &$variables ) {

  // Not sure if this is still required.
  // It was for putting the login form in the "account" management button.
  if ( ! user_is_logged_in() ) {
    $variables['login_form'] = drupal_get_form( 'user_login' );
  }

  // Does the current page represent a node?
  if ( !empty( $variables['node']->type ) ) {
    // Allow the page template to be overriden by one specific to the
    // type of the current node.
    $variables['theme_hook_suggestions'][] =
      'page__node_' . $variables['node']->type;
  }
}

/**
 * Implements hook_views_query_alter()
 *
 * --- ! FRAGILE CODE ! ---
 *
 * We're using this function to alter *every* views query where the view
 * has a filter called "flat". Where that filter exists, we alter the last
 * condition in the query. We assume that this is always the openlayers
 * proximity square filter condition.
 */
function lt_misc_views_query_alter( &$view, &$query ) {


// EMERGENCY FIX
// The flat / square proximity filter has disappeared from the queries.
// This may be because a geocoding limit has been exceeded and the default
// behaviour under such circumstances may be to exclude the filter altogether.
// Whatever the reason, we need to find out why it's happening and find an
// alternative.
//return;


  // Use the presence of a filter called 'flat' to determine whether there
  // is a proximity filter that we can modify.
  if ( ! empty($view->filter['flat']) ) {

    //dsm( $view->filter['flat'] );

    $latlon = postcode_get_latlon();
    //dsm( $latlon );
    if ( empty( $latlon ) ) {
      return;
    }

    $radius = postcode_get_radius();
    //dsm( $radius );

    // Using the openlayers_proximity's own bounds calculation.
    // @todo add module dependency on openlayers_proximity.
    $bounds_calculator = new openlayers_proximity_handler_filter_square();
    $bounds = $bounds_calculator->get_bounds(
      $latlon['lat'], $latlon['lon'], $radius );
    //dsm( $bounds );

    // Just being paranoid here. Could views rely on the array pointer
    // being in a particular position? Unlikely.
    $conditions = &$query->where[1]['conditions'];
    //dsm( $conditions );
    $initial_pos = key( $conditions );

    // Get a reference to the last element of the conditions array, cus
    // that's where we keep the proximity filter. Is there a more elegant
    // way of doing this? Probably.
    end( $conditions );
    $last_pos = key( $conditions );

    // Set the geobounds for the view query to those for the current user
    // settings.
    //dsm( $conditions[$last_pos]['field'] );
    $conditions[$last_pos]['field'] =
      '(openlayers_proximity.lat <= ' . $bounds['north'] .
      ' AND openlayers_proximity.lat >= ' . $bounds['south'] .
      ' AND openlayers_proximity.lon >= ' . $bounds['west'] .
      ' AND openlayers_proximity.lon <= ' . $bounds['east'] . ')';
    //dsm( $conditions[$last_pos]['field'] );

    // Finishing off our paranoid treatment of the array pointer.
    _lt_misc_set_array_pointer( $conditions, $initial_pos );

    //print( "<pre>" );
    //print_object_route( $query, '53' );
    //print( "</pre>" );
  }
}

function _lt_misc_set_array_pointer (&$array,$key) { 
  reset ($array); 
  while (key($array) !== $key) { 
    if (next($array) === false) throw new Exception('Invalid key'); 
  } 
} 




/**
 * @todo Make a print_object module and move code below in to it.
 */


function print_object_route( $object, $text, $depth=0 ) {
  // @idea Instead of printing out keys, make a copy of the original object in
  // a wrapper fn and then use the inner fn to unset keys whose children do not
  // contain the required text. Then show the trimmed down object using //dsm

  if ( $depth > 20 ) {
    return FALSE;
  }

  $array = NULL;

  if ( is_object( $object ) ) {
    ////dsm( 'got an object' );
    $array = get_object_vars( $object );
    ////dsm( $array );
  }
  elseif ( is_array( $object ) ) {
    ////dsm( 'got an array' );
    $array = $object;
  }
  elseif ( strpos( strval($object), $text ) !== FALSE ) {
    ////dsm( 'win! got the text' );
    print_object_node( $object, $depth );
    return TRUE;
  }
  else {
    ////dsm( 'lose :( end of the line' );
    return FALSE;
  }

  $success = FALSE;
  foreach ( $array as $key => $val  ) {

    if ( strval( $key ) != 'view'  &&
      ( strpos( strval($key), $text ) !== FALSE  ||
      print_object_route( $val, $text, $depth+1 ) ) ) {

        print_object_node( $key, $depth );
        $success = TRUE;
    }
  }
  return $success;
}

function print_object_node( $text, $depth ) {
  $spaces = '';
  if ( $depth > 0 ) {
    $depth += 2;
    for ( $i=0; $i < $depth; $i++ ) {
      $spaces .= '&nbsp;';
    }
  }
  else {
    $spaces .= '* ';
  }

  print $spaces . strval( $text ) . '<br />';
}


